##问答题
###1.setTimeout 或者 setInterval 设置定时器是准时触发的吗？为什么？如果不是，他可能延时触发还是延后触发？
不是准时触发的。因为js是单线程执行的，设置定时器后，定时器会将回调函数在指定的时间后放入消息队列中，消息队列遵循先进先出的原则，如果消息队列有其他消息在前，那么此定时器的消息执行就会有时间延迟。因此，定时器其实总是延后触发的。

###2.如下代码 setInterval 设置的定时器激活间隔为多少？为什么？
    setInterval(function(){
    for(var i=0;i<1000*1000*1000;i++);//假设这行代码运行需要100ms
    },1000)
1100ms。JS 中的定时器通过事件循环来实现，不能多线程一边等待1000ms一边执行100ms的循环。

###3.如下代码的输出是什么？为什么？
    setTimeout(function(){
    console.log(1);
    },0)
    console.log(2);
输出：2   1 
因为javascript在浏览器中是单线程执行的，必须在完成当前任务后才执行队列中的下一个任务。输出2的时候，1还在setTimeout函数的消息队列中等待。

###4.如下代码执行结果是什么？请解释原因
    var t = true;

    window.setTimeout(function (){
    t = false;
    },1000);
    while (t){}
    alert('end');
执行这行代码会一直死循环。原因是js是单线程模型，setTimeout()是通过事件循环实现的。    

###5.我们会在很多代码里看到如下语句，请说明在什么场景下需要使用如下形式代码
    setTimeout(function(){
    // balala
    // 这里有很多代码
    // balala
    },0)
我们可以改变任务的执行顺序！因为浏览器会在执行完当前任务队列中的任务，再执行setTimeout队列中积累的的任务。

##代码题
###1.请用 setTimeout 模拟实现 setInterval，并说明你实现的函数和系统自带的 setInterval 有什么不同
[作业链接]()
区别：
id会不断改变，不利于取消
事件处理函数内用时过长会影响下一次定时器触发时间